// Code generated by mockery v1.0.0. DO NOT EDIT.

package repositories

import (
	context "context"

	models "github.com/hasemeneh/PoC-OnlineStore/svc/warehouse/src/models"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// MockHistoryRepo is an autogenerated mock type for the HistoryRepo type
type MockHistoryRepo struct {
	mock.Mock
}

// GetProductByProductID provides a mock function with given fields: ctx, productID
func (_m *MockHistoryRepo) GetProductByProductID(ctx context.Context, productID int64) ([]models.StockHistoryModel, error) {
	ret := _m.Called(ctx, productID)

	var r0 []models.StockHistoryModel
	if rf, ok := ret.Get(0).(func(context.Context, int64) []models.StockHistoryModel); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StockHistoryModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertHistory provides a mock function with given fields: ctx, dbtx, req
func (_m *MockHistoryRepo) InsertHistory(ctx context.Context, dbtx *sqlx.Tx, req models.StockHistoryModel) error {
	ret := _m.Called(ctx, dbtx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, models.StockHistoryModel) error); ok {
		r0 = rf(ctx, dbtx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartTx provides a mock function with given fields: ctx
func (_m *MockHistoryRepo) StartTx(ctx context.Context) (*sqlx.Tx, error) {
	ret := _m.Called(ctx)

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
